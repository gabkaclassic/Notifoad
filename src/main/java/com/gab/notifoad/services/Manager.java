package com.gab.notifoad.services;

import com.gab.notifoad.entity.Toad;
import com.vk.api.sdk.client.TransportClient;
import com.vk.api.sdk.client.VkApiClient;
import com.vk.api.sdk.client.actors.GroupActor;
import com.vk.api.sdk.exceptions.ApiException;
import com.vk.api.sdk.exceptions.ClientException;
import com.vk.api.sdk.httpclient.HttpTransportClient;
import com.vk.api.sdk.objects.messages.Message;
import com.vk.api.sdk.queries.messages.MessagesGetLongPollHistoryQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.util.*;
import java.util.stream.Collectors;

@Service("manager")
public class Manager {
    
    @Value("${chatId}")
    Integer CHAT_ID;
    
    @Value("${appId}")
    private Integer APP_ID;
    
    @Value("${token}")
    private String TOKEN;
    
    @Value("${toadTitle}")
    private String TOAD_TITLE;
    
    private static final TransportClient transportClient = new HttpTransportClient();
    private static final VkApiClient vkApiClient = new VkApiClient(transportClient);
    private static final Random random = new Random();
    
    private GroupActor actor;
    
    private static List<String> whoPhrases = List.of("–ª—É—á—à–∏–π –Ω–∞ —ç—Ç–æ–º —Å–≤–µ—Ç–µ", "–¥—É—Ä–∞—á–æ–∫", "–ø–æ—Ç–Ω—ã–π —á–µ–ª", "–∫–µ–Ω—Ç", "–Ω–∞ —Å–≤–µ—Ç–µ –≤—Å–µ—Ö –º–∏–ª–µ–µ", "—Ü–∞—Ä—å –ª—é–¥–µ–π, —Ü–∞—Ä—å –∑–≤–µ—Ä–µ–π");
    private static List<String> racePhrases = List.of("–ù—É —á—Ç–æ, –Ω–∞—Ä–æ–¥, –ø–æ–≥–Ω–∞–ª–∏ –Ω–∞—Ö—É–π!", "–î–∞–≤–Ω–æ —è –≤–∞—Å –Ω–µ –≤–∏–¥–µ–ª –≤ —É–ª–∏—á–Ω—ã—Ö –≥–æ–Ω–∫–∞—Ö...", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–µ–∑–¥ (—á–µ—Å—Ç–Ω–æ)...");
    private static List<String> eatPhrases = List.of("–ö—É—à–∞—Ç—å –æ—Ö–æ—Ç–∞", "–ï–î–ê–ê–ê–ê–ê", "–ü–æ—Ä–∞ –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å—Å—è");
    private static List<String> defeatPhrases = List.of("...", "–î–∞ —è–ø–æ–Ω–∞ –º–∞—Ç—å", "–ï—Ç–∏—à–∫–∏–Ω—ä —Å–µ–Ω–æ–∫–æ—Å", "–ú–∞—Ç—å —Ç–≤–æ—é –∑–∞ –Ω–æ–≥—É", "–ù–∏—Ö—É—ë–≤–æ –∂–º—ã—Ö–Ω—É–ª–æ", ":(", "–ö–ø—Ü");
    private static List<String> luckyPhrases = List.of("–í–æ—Ç —ç—Ç–æ –Ω–∏—à—Ç—è–∫", "–ü–æ–≤–µ–∑–ª–æ –ø–æ–≤–µ–∑–ª–æ...", "–û–û–û–û–û–û", "–ï–ï–ï–ï –±–æ–π–π–π–π–π–π", ")0))))");
    
    private Toad toad;
    
    @PostConstruct
    private void after() {
        
        toad = new Toad();
        actor = new GroupActor(APP_ID, TOKEN);
    }
    
    @Scheduled(initialDelayString = "${defaultInitialDelay}", fixedRateString = "${workStartInterval}")
    public void workStart() {
    
        if(toad.isWork())
            return;
        
        if(random.nextDouble() < 0.05)
            executeCommand(Command.WORK_COOK);
        
        if(toad.getBugs() > 1500)
            executeCommand(Command.WORK_CROUPIER);
        else {
            
            double chanceThief = random.nextDouble();
            if(toad.getBugs() >= 350) {
                chanceThief += (toad.getSatiety()+5 >= toad.getTarget()) ? 0.2 : 0.1;
            }
            
            if(chanceThief > 0.5)
                executeCommand(Command.WORK_THIEF);
            else
                executeCommand(Command.WORK_CROUPIER);
        }
        
        toad.setWork(true);
    }
    @Scheduled(initialDelayString = "${workFinishDelay}", fixedRateString = "${workFinishInterval}")
    public void workFinish() {
        
        if(!toad.isWork())
            return;
        
        executeCommand(Command.WORK_FINISH);
        
        changeToadStats(getLastMessages(2));
        
        toad.setWork(false);
    }
    
    @Scheduled(cron = "${cronIntervalToadOfDay}")
    public void toadOfDay() {
        
        executeCommand(Command.TOAD_OF_THE_DAY);
        
        String answer = getLastMessages(1).get(0);
        if(answer.contains(TOAD_TITLE)) {
    
            changeToadStats(List.of(answer));
            sendPhrase(getRandomPhrase(luckyPhrases));
        }
        else
            sendPhrase(getRandomPhrase(defeatPhrases));
    }
    
    @Scheduled(fixedRateString = "${recruitInterval}")
    public void recruit() {
        
        if(!toad.isGangExists() && toad.getGangToads() < 11) {
            executeCommand(Command.RECRUIT);
            toad.recruit();
            if(toad.getGangToads() == 11)
                executeCommand(Command.GET_GANG);
        }
    }
    
    @Scheduled(initialDelayString = "${defaultInitialDelay}", fixedRateString = "${randomActionInterval}")
    public void randomAction() {
        
        double chance = random.nextDouble();
        
        if(chance < 0.25)
            executeCommand(Command.KISS);
        else if(chance < 0.5)
            executeCommand(Command.HUGS);
        else if(chance < 0.75)
            executeCommand(Command.BRAWL);
        else
            executeCommand(Command.WHO);
    }
    
    @Scheduled(cron = "${cronCheckInterval}")
    public void checkStats() {
    
        executeCommand(Command.CHECK_INFO);
        setStats(getLastMessages(1).get(0));
    }
    
    @Scheduled(initialDelayString = "${defaultInitialDelay}", fixedRateString = "${raceCheckInterval}")
    public void race() throws InterruptedException {
    
        
        String proposal = getLastMessages().stream()
                .filter(m -> m.contains("–ì–æ–Ω–∫–∞ ")).findFirst().orElse("");
        if(proposal.isEmpty() || toad.isWork())
            return;
        
        try {
    
            int bet = Integer.parseInt(proposal.split(" ")[1]);
    
            if (toad.getBugs() > 150 && bet < toad.getBugs() * 0.5) {
                sendPhrase(getRandomPhrase(racePhrases));
                executeCommand(Command.RACE);
                executeCommand(Command.RACE_READY);
                executeCommand(Command.RACE_START);
                Thread.sleep(10000);
                changeToadStats(getLastMessages(2));
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Scheduled(initialDelayString = "${defaultInitialDelay}", fixedRateString = "${eatInterval}")
    public void eat() {
    
        sendPhrase(getRandomPhrase(eatPhrases));
        
        if(toad.getBugs() >= 500) {
            executeCommand(Command.FATTEN);
            toad.fatten();
        }
        else {
            toad.feed();
            executeCommand(Command.FEED);
        }
    
        changeToadStats(getLastMessages(2));
    }
    
    @Scheduled(fixedRateString = "${marriageRewardInterval}")
    public void marriageReward() {
        
        if(toad.isMarried())
            executeCommand(Command.MARRIAGE_REWARD);
        
        
        changeToadStats(getLastMessages(2));
    }
    
    @Scheduled(initialDelayString = "${defaultInitialDelay}", fixedRateString = "${reviveCheckInterval}")
    public void revive() {
        
        if(!toad.isAlive()) {
            toad.heal();
            executeCommand(Command.REVIVE);
        }
    }
    
    
    @Scheduled(initialDelayString = "${defaultInitialDelay}", fixedRateString = "${partyCheckInterval}")
    public void party() throws InterruptedException {
        
        if(!toad.isParty() && !toad.isWork()) {
        String proposal = getLastMessages().stream()
                .filter(m -> m.equals("–ñ–∞–±—É –Ω–∞ —Ç—É—Å—É"))
                .findFirst().orElse("");
        
        if(!proposal.isEmpty()) {
            executeCommand(Command.PARTY);
            toad.setParty(true);
            executeCommand(Command.PARTY_START);
            Thread.sleep(10000);
            sendPhrase(getRandomPhrase(luckyPhrases));
            changeToadStats(getLastMessages());
        }
        }
    }
    
    private String getRandomPhrase(List<String> list) {
        
        return list.get(random.nextInt(list.size()));
    }
    
    private void executeCommand(Command command) {
    
        try {
            
            if(command.equals(Command.WHO))
                vkApiClient.messages().send(actor)
                        .message(String.format(command.getText(), getRandomPhrase(whoPhrases)))
                        .chatId(CHAT_ID).randomId(random.nextInt()).execute();
            else if(command.equals(Command.RACE))
                vkApiClient.messages().send(actor)
                        .message(String.format(command.getText(), random.nextInt(50, 100)))
                        .chatId(CHAT_ID).randomId(random.nextInt()).execute();
            else
                vkApiClient.messages().send(actor).message(command.getText())
                        .chatId(CHAT_ID).randomId(random.nextInt()).execute();
        } catch (ApiException | ClientException e) {
            e.printStackTrace();
        }
    }
    
    private void setStats(String info) {
        
        try {
            String[] lines = info.split("\n");
            toad.setLevel(Integer.parseInt(lines[1].split("–£—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –∂–∞–±—ã: ")[1]));
            toad.setSatiety(Integer.parseInt(lines[2].split("\\uD83C\\uDF70–°—ã—Ç–æ—Å—Ç—å: ")[1].split("/")[0]));
            toad.setAlive(lines[4].contains("–ñ–∏–≤–∞—è"));
            toad.setBugs(Integer.parseInt(lines[5].split("\\uD83D\\uDC1E–ë—É–∫–∞—à–∫–∏: ")[1]));
            toad.setHappy(Integer.parseInt(lines[7].split("\\(")[1].split("\\)")[0]));
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void changeToadStats(List<String> answers) {
        
        try {
    
            for (String answer : answers) {
        
                int bugs = 0;
                if (answer.contains("üêû: +"))
                    bugs = Integer.parseInt(answer.split("üêû: +")[1].split(" ")[0]);
        
                int satiety = 0;
                if (answer.contains("\uD83C\uDF70: +"))
                    satiety = Integer.parseInt(answer.split("\uD83C\uDF70: +")[1].split(" ")[0]);
        
                toad.changeBugs(bugs);
                toad.addSatiety(satiety);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    public void sendPhrase(String phrase) {
    
        try {
            vkApiClient.messages().send(actor).message(phrase)
                    .chatId(CHAT_ID).randomId(random.nextInt()).execute();
        } catch (ApiException | ClientException e) {
            e.printStackTrace();
        }
    }
    
    private List<String> getLastMessages(int count) {
    
        List<String> textMessages = Collections.emptyList();
        try {
            Integer ts = vkApiClient.messages().getLongPollServer(actor).execute().getTs();
            MessagesGetLongPollHistoryQuery historyQuery = vkApiClient.messages().getLongPollHistory(actor).ts(ts);
            textMessages = historyQuery.execute().getMessages().getItems().stream()
                    .sorted(Comparator.comparing(Message::getDate).reversed())
                    .limit(count)
                    .map(Message::getText).collect(Collectors.toList());
//            textMessages = vkApiClient.messages().getHistory(actor).userId(CHAT_ID).count(count).execute()
//                    .getItems().stream().map(Message::getText).collect(Collectors.toList());
        } catch (ApiException | ClientException e) {
            e.printStackTrace();
        }
    
        return textMessages;
    }
    
    private List<String> getLastMessages() {
        
        List<String> textMessages = Collections.emptyList();
        try {
            Integer ts = vkApiClient.messages().getLongPollServer(actor).execute().getTs();
            MessagesGetLongPollHistoryQuery historyQuery = vkApiClient.messages().getLongPollHistory(actor).ts(ts);
            textMessages = historyQuery.execute().getMessages().getItems().stream()
                    .sorted(Comparator.comparing(Message::getDate).reversed())
                    .map(Message::getText).collect(Collectors.toList());
        } catch (ApiException | ClientException e) {
            e.printStackTrace();
        }
        
        return textMessages;
    }
}

enum Command {
    
    RECRUIT("–í–∑—è—Ç—å –∂–∞–±—É"),
    FEED("–ü–æ–∫–æ—Ä–º–∏—Ç—å –∂–∞–±—É"),
    MARRIAGE_REWARD("–ë—Ä–∞–∫ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ"),
    FATTEN("–û—Ç–∫–æ—Ä–º–∏—Ç—å –∂–∞–±—É"),
    TOAD_OF_THE_DAY("–ñ–∞–±–∞ –¥–Ω—è"),
    CLAN_REWARD("–ö–ª–∞–Ω –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ"),
    BRONZE_DUNGEON("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±—É –≤ –±—Ä–æ–Ω–∑–æ–≤–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ"),
    SILVER_DUNGEON("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±—É –≤ —Å–µ—Ä–µ–±—Ä—è–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ"),
    GOLD_DUNGEON("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–±—É –≤ –∑–æ–ª–æ—Ç–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ"),
    WORK_CROUPIER("–†–∞–±–æ—Ç–∞ –∫—Ä—É–ø—å–µ"),
    WORK_THIEF("–†–∞–±–æ—Ç–∞ –≥—Ä–∞–±–∏—Ç–µ–ª—å"),
    WORK_COOK("–ü–æ—Ö–æ–¥ –≤ —Å—Ç–æ–ª–æ–≤—É—é"),
    WORK_FINISH("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"),
    CHECK_INFO("–ú–æ—è –∂–∞–±–∞"),
    REVIVE("–†–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∂–∞–±—É"),
    CANDY("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ–¥–µ–Ω—Ü—ã"),
    HUGS("–û–±–Ω—è—Ç—å –≤—Å–µ—Ö"),
    BRAWL("–û—Ç–º—É–¥–æ—Ö–∞—Ç—å –≤—Å–µ—Ö"),
    KISS("–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å –≤—Å–µ—Ö"),
    WHO("–ñ–∞–±–∞–±–æ—Ç –∫—Ç–æ %s"),
    RACE("–ì–æ–Ω–∫–∞ %d"),
    RACE_READY("–°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤"),
    RACE_START("–ì–æ–Ω–∫–∞ —Å—Ç–∞—Ä—Ç"),
    GET_GANG("–°–æ–±—Ä–∞—Ç—å –±–∞–Ω–¥—É"),
    PARTY("–ñ–∞–±—É –Ω–∞ —Ç—É—Å—É"),
    PARTY_START("–ù–∞—á–∞—Ç—å —Ç—É—Å—É");
    
    private String text;
    
    Command(String t) {
        
        text = t;
    }
    
    public String getText() {
        return text;
    }
}
